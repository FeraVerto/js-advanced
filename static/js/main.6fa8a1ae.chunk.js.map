{"version":3,"sources":["redux/actions.ts","components/CurrencyExchange/CurrencyExchange.tsx","containers/CurrencyExchangeContainer/CurrencyExchangeContainer.tsx","lessons/lesson1/lesson1.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfBYN","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","data-currency","onChange","className","map","currency","index","key","onClick","data-action","CurrencyExchangeContainer","compose","connect","state","currencies","dispatch","setCurrencyAmount","type","ChangeCurrencyFieldAC","setAction","ChangeActionAC","changeCurrency","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","Number","toFixed","action","Lesson1","App","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6fa8a1ae.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\n  CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\n  CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\n  CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\n}\n\n/*----------ChangeCurrencyField------------*/\nexport type ChangeCurrencyFieldType = {\n  type: \"CHANGE_CURRENCY_FIELD\"\n  amountOfBYN: string\n  amountOfCurrency: string\n};\n\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => ({\n  type: \"CHANGE_CURRENCY_FIELD\", amountOfBYN, amountOfCurrency,\n});\n\n/*----------ChangeAction------------*/\n\nexport type ChangeAction = {\n  type: \"IS_BUYING\"\n  isBuying: boolean\n};\n\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => ({\n  type: \"IS_BUYING\", isBuying\n});\n\n/*----------ChangeCurrentCurrency------------*/\n\nexport type ChangeCurrentCurrencyType = {\n  type: \"CHANGE_CURRENT_CURRENCY\"\n  currentCurrency: string\n};\n\nexport const changeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => ({\n  type: \"CHANGE_CURRENT_CURRENCY\", currentCurrency\n});\n\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;\n","import React from 'react';\n\ntype CurrencyExchangePropsType = {\n  currenciesName: string[];\n  currentCurrency: string;\n  currencyRate: number;\n  isBuying: boolean;\n  amountOfBYN: string;\n  amountOfCurrency: string;\n  changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\n  changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\n};\n\nconst CurrencyExchange: React.FunctionComponent<CurrencyExchangePropsType> = ({\n  currenciesName,\n  currentCurrency,\n  currencyRate,\n  isBuying,\n  amountOfBYN,\n  amountOfCurrency,\n  changeCurrencyField,\n  changeAction,\n  changeCurrentCurrency,\n}) => {\n  const viewCurrency = isBuying ? (\n    <React.Fragment>\n      <label>\n        You give the next amount of BYN:\n        <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\n      </label>\n      <label>\n        You get the next amount of {currentCurrency}:\n        <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\n      </label>\n    </React.Fragment>\n  ) : (\n    <React.Fragment>\n      <label>\n        You give the next amount of {currentCurrency}:\n        <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\n      </label>\n      <label>\n        You get the next amount of BYN:\n        <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\n      </label>\n    </React.Fragment>\n  );\n\n  return (\n    <div className=\"currency\">\n      <h2>Currency exchange</h2>\n      <div className=\"currency-names\">\n        <p>Current currency:</p>\n        <ul>\n          {currenciesName.map((currency: string, index: number) => {\n            return (\n              <li\n                key={`${index}-${currency}`}\n                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\n                onClick={changeCurrentCurrency}\n                data-currency={currency}\n              >\n                {currency}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      <div className=\"currency-action\">\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\n          Buy\n        </span>\n        <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\n          Sell\n        </span>\n      </div>\n      <div className=\"fields\">\n        {/*Выводим курс валюты*/}\n        <p>Currency rate: {currencyRate}</p>\n        {viewCurrency}\n      </div>\n    </div>\n  );\n};\n\nexport default CurrencyExchange;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\nimport { IGlobalState } from '../../redux/state';\nimport { CurrencyState } from '../../redux/currencyReducer';\nimport { compose, Dispatch } from 'redux';\nimport {\n  ChangeActionAC,\n  ChangeCurrencyFieldAC,\n  changeCurrentCurrencyAC,\n  CurrencyReducersTypes,\n} from '../../redux/actions';\nimport { log } from 'util';\n\n/*const initialState: CurrencyState = {\n  currencies: [\n    {\n      currencyName: 'USD',\n      buyRate: 2.62,\n      sellRate: 2.58,\n    },\n    {\n      currencyName: 'EUR',\n      buyRate: 3.1,\n      sellRate: 3.06,\n    },\n    {\n      currencyName: 'RUR',\n      buyRate: 0.0345,\n      sellRate: 0.0341,\n    },\n  ],\n  currentCurrency: 'USD',\n  isBuying: true,\n  amountOfBYN: '',\n  amountOfCurrency: '',\n};*/\n\ninterface ICurrencyProps extends CurrencyState {\n  setCurrencyAmount: (amountOfBYN: string, amountOfCurrency: string) => void;\n  setAction: (isBuying: boolean) => void;\n  changeCurrency: (currency: string) => void;\n}\n\nconst CurrencyEContainer: React.FunctionComponent<ICurrencyProps> = ({\n   currencies,\n   currentCurrency,\n   isBuying,\n   amountOfBYN,\n   amountOfCurrency,\n   setCurrencyAmount,\n   setAction,\n   changeCurrency,\n }) => {\n\n  //Курс валюты, выводится в компонент CurrencyExchange (Валютная биржа)\n  let currencyRate: number = 0;\n\n  //проходит по массиву валют и проверяет равна ли currencyName(наименование валюты) currentCurrency(текущей выбранной валюте)\n  //и, если равна, то присваиваем currencyRate значение в зависимости от isBuying либо buyRate, либо sellRate этой валюты\n  //возвращает currencyName\n  //передаем в CurrencyExchange, мапим и выводим список валют\n  const currenciesName = currencies.map((currency) => {\n    if (currency.currencyName === currentCurrency) {\n      currencyRate = isBuying ? currency.buyRate : currency.sellRate;\n    }\n    return currency.currencyName;\n  });\n\n\n  const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\n    //вводим значение в инпут \"You give the next amount of BYN:\" и записываем его в value\n    let value = e.currentTarget.value;\n    //isFinite проверяет является ли переданное число конечным\n    //если не является, то завешаем функцию\n    if (!isFinite(+value)) return;\n\n    if (e.currentTarget.dataset.currency) {\n      //достаем значение атрибута data-currency тэга input (data-* - нестандартный атрибут для передачи данных\n      // из html в js)\n      const trigger: string = e.currentTarget.dataset.currency;\n      //проверяем чему он равен\n      if (trigger === 'byn') {\n        if (value === '') {\n          //отправляет в диспатч пустые значения\n          setCurrencyAmount(value, value);\n        } else {\n          //отправляет в диспатч значение введенное в инпут и вычисленное значение\n          //Метод toFixed() форматирует число, используя запись с фиксированной запятой.\n          setCurrencyAmount(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\n        }\n      } else {\n        if (value === '') {\n          setCurrencyAmount(value, value);\n        } else {\n          setCurrencyAmount((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\n        }\n      }\n    }\n  };\n\n  //достает значение из атрибута  data-action и проверяет: если 'buy', то диспатчит true\n  const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\n    e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\n  };\n\n  //достает значение из data-currency= \"currency\" и диспатчит\n  const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\n    e.currentTarget.dataset.currency && changeCurrency(e.currentTarget.dataset.currency);\n  };\n\n  return (\n    <React.Fragment>\n      <CurrencyExchange\n        currenciesName={currenciesName}\n        currentCurrency={currentCurrency}\n        currencyRate={currencyRate}\n        isBuying={isBuying}\n        amountOfBYN={amountOfBYN}\n        amountOfCurrency={amountOfCurrency}\n        changeCurrencyField={changeCurrencyField}\n        changeAction={changeAction}\n        changeCurrentCurrency={changeCurrentCurrency}\n      />\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = (state: IGlobalState) => {\n  return {\n    currencies: state.currency.currencies,\n    currentCurrency: state.currency.currentCurrency,\n    isBuying: state.currency.isBuying,\n    amountOfBYN: state.currency.amountOfBYN,\n    amountOfCurrency: state.currency.amountOfCurrency,\n  };\n};\n// @ts-ignore\nconst mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>) => {\n  return {\n    setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\n      dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\n    },\n    setAction(isBuying: boolean) {\n      dispatch(ChangeActionAC(isBuying));\n    },\n    changeCurrency(currency: string) {\n      dispatch(changeCurrentCurrencyAC(currency));\n    },\n  };\n};\n// @ts-ignore\nexport const CurrencyExchangeContainer = compose(connect(mapStateToProps, mapDispatchToProps))(CurrencyEContainer);\n\n","import React from 'react';\nimport { CurrencyExchangeContainer } from '../../containers/CurrencyExchangeContainer/CurrencyExchangeContainer';\n\n// Redux\n// https://tproger.ru/translations/redux-for-beginners/\n// https://monsterlessons.com/project/series/redux-js-dlya-nachinayushih\n// https://xsltdev.ru/react/redux/intro/\n\n// Typescript genetic\n// https://habr.com/ru/post/455473/\n// https://habr.com/ru/company/ruvds/blog/426729/\n\n// Typescript from zero + typescript generic (English video)\n// https://www.youtube.com/watch?v=3d9XqFmCmQw\n\n// Container component\n// https://habr.com/ru/company/ruvds/blog/446206/\n\n// Dispatch\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch\n\nconst Lesson1: React.FunctionComponent = () => {\n  return (\n    <React.Fragment>\n      <CurrencyExchangeContainer />\n    </React.Fragment>\n  );\n};\n\nexport default Lesson1;\n","import React from 'react';\nimport './App.css';\nimport Lesson1 from './lessons/lesson1/lesson1';\n//import './lessons/lesson2/lesson2'\nimport Lesson3 from './lessons/lesson3/Lesson3';\nimport Lesson4 from './lessons/lesson4/Lesson4';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Lesson1 />\n      {/*<Lesson3 />*/}\n      {/*<Lesson4 />*/}\n    </div>\n  );\n}\n\nexport default App;\n","import { ACTIONS_TYPE, CurrencyReducersTypes } from './actions';\n\ntype CurrencyType = {\n  currencyName: string;\n  buyRate: number;\n  sellRate: number;\n};\nexport type CurrencyState = {\n  currencies: Array<CurrencyType>;\n  currentCurrency: string;\n  isBuying: boolean;\n  amountOfBYN: string;\n  amountOfCurrency: string;\n};\n\nconst initialState: CurrencyState = {\n  currencies: [\n    {\n      currencyName: 'USD',\n      buyRate: 2.62,\n      sellRate: 2.58,\n    },\n    {\n      currencyName: 'EUR',\n      buyRate: 3.1,\n      sellRate: 3.06,\n    },\n    {\n      currencyName: 'RUR',\n      buyRate: 0.0345,\n      sellRate: 0.0341,\n    },\n  ],\n  currentCurrency: 'USD',\n  isBuying: true,\n  amountOfBYN: '',\n  amountOfCurrency: '',\n};\n\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\n\n  switch (action.type) {\n    case 'CHANGE_CURRENCY_FIELD':\n      return { ...state, amountOfBYN: action.amountOfBYN, amountOfCurrency: action.amountOfCurrency };\n\n    case 'IS_BUYING':\n      return { ...state, isBuying: action.isBuying };\n\n    case 'CHANGE_CURRENT_CURRENCY':\n      return { ...state, currentCurrency: action.currentCurrency };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore } from 'redux';\nimport { currencyReducer } from './currencyReducer';\n\nconst reducers = combineReducers({\n  currency: currencyReducer,\n});\nexport type IGlobalState = ReturnType<typeof reducers>;\n\nexport const store = createStore(reducers);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/state';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}